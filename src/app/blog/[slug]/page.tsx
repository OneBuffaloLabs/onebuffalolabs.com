import { MDXRemote } from 'next-mdx-remote/rsc';
import { getPostData, getPostSlugs } from '@/lib/posts';
import type { Metadata } from 'next';
import { notFound } from 'next/navigation';

// This setting is the key to fixing the 404 behavior.
// It tells Next.js that any slug not generated by generateStaticParams
// should automatically be a 404 page. This works in both dev and prod.
export const dynamicParams = false;

/**
 * Generates page metadata dynamically based on the post.
 */
export async function generateMetadata({
  params,
}: {
  params: { slug: string };
}): Promise<Metadata> {
  const post = await getPostData(params.slug);
  if (!post) {
    return {
      title: 'Post Not Found',
    };
  }
  return {
    title: post.frontMatter.title,
    description: `Read the blog post: ${post.frontMatter.title}`,
  };
}

/**
 * This function MUST run in both development and production to inform
 * Next.js of all valid blog post slugs.
 */
export async function generateStaticParams() {
  return getPostSlugs();
}

/**
 * The page component for rendering a single blog post.
 */
export default async function PostPage({ params }: { params: { slug: string } }) {
  const post = await getPostData(params.slug);

  // This check is a robust fallback. Although dynamicParams handles invalid
  // slugs, this will catch any other case where post data might be missing.
  if (!post) {
    notFound();
  }

  const { frontMatter, content } = post;

  return (
    <article className='prose prose-invert mx-auto p-6 lg:prose-xl'>
      <h1 className='text-3xl font-bold md:text-4xl'>{frontMatter.title}</h1>
      <p className='text-slate-400'>
        Published on{' '}
        {new Date(frontMatter.date).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}{' '}
        by {frontMatter.author}
      </p>
      <div className='mt-8'>
        <MDXRemote source={content} />
      </div>
    </article>
  );
}
